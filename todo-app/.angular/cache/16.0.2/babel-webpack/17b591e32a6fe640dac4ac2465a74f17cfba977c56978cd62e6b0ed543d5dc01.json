{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { loadTodos, loadTodosSuccess, loadTodosFailure } from './todo.actions';\nimport { of, from } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"src/app/components/todos/todos.service\";\nclass TodoEffects {\n  constructor(actions$, store, todoService) {\n    this.actions$ = actions$;\n    this.store = store;\n    this.todoService = todoService;\n    // Run this code when a loadTodos action is dispatched\n    this.getTodos$ = createEffect(() => this.actions$.pipe(ofType(loadTodos), switchMap(() =>\n    // Call the getTodos method, convert it to an observable\n    from(this.todoService.getTodos()).pipe(\n    // Take the returned value and return a new success action containing the todos\n    map(todos => loadTodosSuccess({\n      todos: todos\n    })),\n    // Or... if it errors return a new failure action containing the error\n    catchError(error => of(loadTodosFailure({\n      error\n    })))))));\n  }\n}\nTodoEffects.ɵfac = function TodoEffects_Factory(t) {\n  return new (t || TodoEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.TodoService));\n};\nTodoEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoEffects,\n  factory: TodoEffects.ɵfac\n});\nexport { TodoEffects };","map":{"version":3,"names":["createEffect","ofType","loadTodos","loadTodosSuccess","loadTodosFailure","of","from","switchMap","map","catchError","TodoEffects","constructor","actions$","store","todoService","getTodos$","pipe","getTodos","todos","error","i0","ɵɵinject","i1","Actions","i2","Store","i3","TodoService","factory","ɵfac"],"sources":["C:\\Angular\\todo-app\\src\\app\\state\\todos\\todo.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport {\r\n  loadTodos,\r\n  loadTodosSuccess,\r\n  loadTodosFailure,\r\n} from './todo.actions';\r\nimport { of, from } from 'rxjs';\r\nimport { switchMap, map, catchError } from 'rxjs/operators';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../app.state';\r\nimport { TodoService } from 'src/app/components/todos/todos.service';\r\n\r\n@Injectable()\r\nexport class TodoEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private store: Store<AppState>,\r\n    private todoService: TodoService\r\n  ) {}\r\n\r\n  // Run this code when a loadTodos action is dispatched\r\n  getTodos$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadTodos),\r\n      switchMap(() =>\r\n        // Call the getTodos method, convert it to an observable\r\n        from(this.todoService.getTodos()).pipe(\r\n          // Take the returned value and return a new success action containing the todos\r\n          map((todos) => loadTodosSuccess({ todos: todos })),\r\n          // Or... if it errors return a new failure action containing the error\r\n          catchError((error) => of(loadTodosFailure({ error })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  // Run this code when the addTodo or removeTodo action is dispatched\r\n//   saveTodos$ = createEffect(\r\n//     () =>\r\n//       this.actions$.pipe(\r\n//         ofType(addTodo, removeTodo),\r\n//         withLatestFrom(this.store.select(selectAllTodos)),\r\n//         switchMap(([action, todos]) => from(this.todoService.saveTodos(todos)))\r\n//       ),\r\n//     // Most effects dispatch another action, but this one is just a \"fire and forget\" effect\r\n//     { dispatch: false }\r\n//   );\r\n}"],"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SACEC,SAAS,EACTC,gBAAgB,EAChBC,gBAAgB,QACX,gBAAgB;AACvB,SAASC,EAAE,EAAEC,IAAI,QAAQ,MAAM;AAC/B,SAASC,SAAS,EAAEC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;;;AAK3D,MACaC,WAAW;EACtBC,YACUC,QAAiB,EACjBC,KAAsB,EACtBC,WAAwB;IAFxB,KAAAF,QAAQ,GAARA,QAAQ;IACR,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,WAAW,GAAXA,WAAW;IAGrB;IACA,KAAAC,SAAS,GAAGf,YAAY,CAAC,MACvB,IAAI,CAACY,QAAQ,CAACI,IAAI,CAChBf,MAAM,CAACC,SAAS,CAAC,EACjBK,SAAS,CAAC;IACR;IACAD,IAAI,CAAC,IAAI,CAACQ,WAAW,CAACG,QAAQ,EAAE,CAAC,CAACD,IAAI;IACpC;IACAR,GAAG,CAAEU,KAAK,IAAKf,gBAAgB,CAAC;MAAEe,KAAK,EAAEA;IAAK,CAAE,CAAC,CAAC;IAClD;IACAT,UAAU,CAAEU,KAAK,IAAKd,EAAE,CAACD,gBAAgB,CAAC;MAAEe;IAAK,CAAE,CAAC,CAAC,CAAC,CACvD,CACF,CACF,CACF;EAhBE;;AALQT,WAAW,C;mBAAXA,WAAW,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,KAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,WAAA;AAAA;AAAXjB,WAAW,C;SAAXA,WAAW;EAAAkB,OAAA,EAAXlB,WAAW,CAAAmB;AAAA;SAAXnB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}